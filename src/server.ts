// src/server.ts
import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import { AIMessage, HumanMessage, BaseMessage } from '@langchain/core/messages';
import { appGraph } from './agents/orchestrator/graph';
import logger from './utils/logger';

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;

// In-memory session storage for demonstration purposes.
const sessions: Record<string, { messages: BaseMessage[] }> = {};

app.post('/chat', async (req, res) => {
Â  logger.info('[/chat] endpoint hit. Processing request...');

Â  const { sessionId, input } = req.body;

Â  if (!input) {
Â  Â  return res.status(400).json({ error: 'Input message is required.' });
Â  }

Â  const currentSessionId = sessionId || uuidv4();
Â  if (!sessions[currentSessionId]) {
Â  Â  sessions[currentSessionId] = { messages: [] };
Â  Â  logger.info(`New session created: ${currentSessionId}`);
Â  }

Â  const sessionMessages = sessions[currentSessionId].messages;
Â  // Add the new user message to the history for this call
Â  const updatedMessages = [...sessionMessages, new HumanMessage(input)];

Â  try {
Â  Â  logger.info({ sessionId: currentSessionId, input }, 'Invoking agent graph...');

Â  Â  const finalState = await appGraph.invoke({
Â  Â  Â  messages: updatedMessages,
Â  Â  });

Â  Â  logger.info('Agent graph invocation complete.');

Â  Â  const lastMessage = finalState.messages[finalState.messages.length - 1];

Â  Â  // **FIX START**: Replace the fragile `_getType()` check with the robust `instanceof`.
Â  Â  if (lastMessage && lastMessage instanceof AIMessage && lastMessage.content) {
Â  Â  // **FIX END**
Â  Â  Â  // Add the user's message and the AI's final response to the session history
Â  Â  Â  sessions[currentSessionId].messages.push(new HumanMessage(input));
Â  Â  Â  sessions[currentSessionId].messages.push(lastMessage);

Â  Â  Â  res.status(200).json({
Â  Â  Â  Â  sessionId: currentSessionId,
Â  Â  Â  Â  output: lastMessage.content,
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  logger.error(
Â  Â  Â  Â  { finalState },
Â  Â  Â  Â  'Graph execution finished, but the last message was not a valid AI response.'
Â  Â  Â  );
Â  Â  Â  res
Â  Â  Â  Â  .status(500)
Â  Â  Â  Â  .json({ error: 'Agent did not produce a valid response.' });
Â  Â  }
Â  } catch (error: unknown) {
Â  Â  logger.error('Error processing chat request.');

Â  Â  if (error instanceof Error) {
Â  Â  Â  logger.error(
Â  Â  Â  Â  { message: error.message, stack: error.stack, name: error.name },
Â  Â  Â  Â  'Caught a standard Error:'
Â  Â  Â  );
Â  Â  } else {
Â  Â  Â  logger.error(
Â  Â  Â  Â  { rawError: JSON.stringify(error, null, 2) },
Â  Â  Â  Â  'Caught a non-standard error type:'
Â  Â  Â  );
Â  Â  }

Â  Â  if (!res.headersSent) {
Â  Â  Â  res.status(500).json({ error: 'An internal error occurred.' });
Â  Â  }
Â  }
});

export function startServer() {
Â  app.listen(PORT, () => {
Â  Â  logger.info(`ðŸ¤– Analyst Assistant server listening on http://localhost:${PORT}`);
Â  Â  logger.info('Send POST requests to http://localhost:3000/chat');
Â  Â  logger.info('Example curl command:');
Â  Â  logger.info(
Â  Â  Â  `Invoke-WebRequest -Uri http://localhost:3000/chat -Method POST -Headers @{'Content-Type' = 'application/json'} -Body '{"input": "Hello, can you look at a property for me? https://www.immobilienscout24.de/expose/123456789"}'`
Â  Â  );
Â  });
}